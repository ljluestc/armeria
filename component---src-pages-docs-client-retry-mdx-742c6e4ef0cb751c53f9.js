(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{"/94A":function(e){e.exports=JSON.parse('{"root":["index","setup"],"References":{"Community articles":"/community/articles","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"Server":["server-basics","server-decorator","server-grpc","server-thrift","server-docservice","server-annotated-service","server-http-file","server-servlet","server-access-log","server-cors","server-sse"],"Client":["client-http","client-thrift","client-grpc","client-decorator","client-retrofit","client-custom-http-headers","client-timeouts","client-retry","client-circuit-breaker","client-service-discovery"],"Advanced":["advanced-logging","advanced-structured-logging","advanced-custom-attributes","advanced-structured-logging-kafka","advanced-unit-testing","advanced-production-checklist","advanced-zipkin","advanced-zookeeper","advanced-saml","advanced-spring-webflux-integration","advanced-dropwizard-integration"]}')},"81ph":function(e){e.exports=JSON.parse('{"data":{"allMdx":{"nodes":[{"tableOfContents":{"items":[{"url":"#requestcontext-custom-attributes","title":"RequestContext custom attributes"}]},"excerpt":"RequestContext  custom attributes When you are using multiple decorators, you might want to pass some value to the next decorator.\\nYou can do this by attaching attributes to a  type://RequestContext . To attach an attribute,\\nyou need to define an  Attribu…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-custom-attributes"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-dropwizard","title":"Using Armeria with Dropwizard"}]},"excerpt":"Using Armeria with Dropwizard Visit  armeria-examples  to find a fully \\nworking example. Dropwizard provides many features which are necessary for building a web application, such as metrics,\\nmodel validation, externalized and extensible configuration, et…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-dropwizard-integration"}},{"tableOfContents":{"items":[{"url":"#logging-contextual-information","title":"Logging contextual information"}]},"excerpt":"Logging contextual information With Armeria\'s  Logback  integration, you can log the properties of the\\n type://RequestContext  of the request being handled.  type://RequestContextExportingAppender  is\\na Logback appender that exports the properties of the …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-logging"}},{"tableOfContents":{"items":[{"url":"#saml-single-sign-on","title":"SAML Single Sign-On"}]},"excerpt":"SAML Single Sign-On Visit  armeria-examples  to find a fully working example. What is SAML? Security Assertion Markup Language (SAML) \\nis an open standard for exchanging authentication and authorization data between an identity provider and\\na service prov…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-saml"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-spring-webflux","title":"Using Armeria with Spring WebFlux"}]},"excerpt":"Using Armeria with Spring WebFlux Visit  armeria-examples  to find a fully working example. Spring framework provides powerful features which are necessary for building a web application, such as\\ndependency injection, data binding, AOP, transaction, etc. …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-spring-webflux-integration"}},{"tableOfContents":{"items":[{"url":"#structured-logging","title":"Structured logging"}]},"excerpt":"Structured logging Although traditional logging is a useful tool to diagnose the behavior of an application, it has its own\\nproblem; the resulting log messages are not always machine-friendly. This section explains the Armeria API for\\nretrieving the infor…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-structured-logging"}},{"tableOfContents":{"items":[{"url":"#unit-testing-client-and-service","title":"Unit-testing Client and Service"}]},"excerpt":"Unit-testing  Client  and  Service A unit test of a client or a service will require you to prepare two objects: type://ClientRequestContext  or  type://ServiceRequestContext type://HttpRequest  or  type://RpcRequest type://ClientRequestContext  or  type:…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-unit-testing"}},{"tableOfContents":{"items":[{"url":"#production-checklist","title":"Production checklist"}]},"excerpt":"Production checklist Note that the advices in this page are not always applicable for every use case and thus should be\\napplied with caution. Do not apply the changes you really do not need. You may want to consider the following options before putting yo…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-production-checklist"}},{"tableOfContents":{"items":[{"url":"#structured-logging-with-kafka","title":"Structured logging with Kafka"}]},"excerpt":"Structured logging with Kafka TBW - See  type://KafkaAccessLogWriter .","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-structured-logging-kafka"}},{"tableOfContents":{"items":[{"url":"#zipkin-integration","title":"Zipkin integration"}]},"excerpt":"Zipkin integration If you want to troubleshoot latency problems in microservice architecture, you will want to use distributed\\ntracing system such as  Zipkin . It gathers timing data and shows which component is\\nfailing or taking more time than others in …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-zipkin"}},{"tableOfContents":{"items":[{"url":"#service-discovery-with-zookeeper","title":"Service discovery with ZooKeeper"}]},"excerpt":"Service discovery with ZooKeeper Automatic service registration Use  type://ZooKeeperUpdatingListener  and  type://ZooKeeperRegistrationSpec  to register your server\\nto a ZooKeeper cluster: The  type://ZooKeeperRegistrationSpec  is used to convert the inf…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-zookeeper"}},{"tableOfContents":{"items":[{"url":"#sending-custom-http-headers","title":"Sending custom HTTP headers"}]},"excerpt":"Sending custom HTTP headers When sending an RPC request, it is sometimes required to send HTTP headers with it, such as an authentication token.\\nThere are four ways to customize the HTTP headers of your RPC request: Using the  type://Clients#withHttpHeade…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-custom-http-headers"}},{"tableOfContents":{"items":[{"url":"#circuit-breaker","title":"Circuit breaker"}]},"excerpt":"Circuit breaker In microservice architecture, it\'s common that various services running on different machines are connected to\\neach other through remote calls. If one of the services becomes unreachable somehow such as due to network\\nissues, the client wh…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-circuit-breaker"}},{"tableOfContents":{"items":[{"url":"#decorating-a-client","title":"Decorating a client"}]},"excerpt":"Decorating a client A \'decorating client\' (or a \'decorator\') is a client that wraps another client to intercept an outgoing\\nrequest or an incoming response. As its name says, it is an implementation of  the decorator pattern .\\nClient decoration takes a cr…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-decorator"}},{"tableOfContents":{"items":[{"url":"#calling-a-grpc-service","title":"Calling a gRPC service"}]},"excerpt":"Calling a gRPC service Visit  armeria-examples  to find a fully working example. Let\'s assume we have the following  gRPC  service definition, served at  http://127.0.0.1:8080/ , just like\\nwhat we used in  Running a gRPC service : Making a call starts fro…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-grpc"}},{"tableOfContents":{"items":[{"url":"#calling-an-http-service","title":"Calling an HTTP service"}]},"excerpt":"Calling an HTTP service See also Retrofit integration","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-http"}},{"tableOfContents":{"items":[{"url":"#automatic-retry","title":"Automatic retry"}]},"excerpt":"Automatic retry When a client gets an error response, it might want to retry the request depending on the response.\\nThis can be accomplished using a  decorator , and Armeria provides the following\\nimplementations out-of-the box. type://RetryingClient type…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-retry"}},{"tableOfContents":{"items":[{"url":"#client-side-load-balancing-and-service-discovery","title":"Client-side load balancing and service discovery"}]},"excerpt":"Client-side load balancing and service discovery You can configure an Armeria client to distribute its requests to more than one server autonomously, unlike\\ntraditional server-side load balancing where the requests go through a dedicated load balancer suc…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-service-discovery"}},{"tableOfContents":{"items":[{"url":"#overriding-client-timeouts","title":"Overriding client timeouts"}]},"excerpt":"Overriding client timeouts Sometimes, the default timeouts used by the Armeria clients do not suit a particular scenario well.\\nIn these cases, you might want to override the timeout settings. Using  ClientBuilder Adjusting connection-level timeouts You ne…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-timeouts"}},{"tableOfContents":{"items":[{"url":"#retrofit-integration","title":"Retrofit integration"}]},"excerpt":"Retrofit integration Retrofit  is a library that simplifies the access to RESTful services\\nby turning an HTTP API into a Java interface. Armeria provides a builder class called  type://ArmeriaRetrofit  that builds an alternative\\n Retrofit  implementation …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-retrofit"}},{"tableOfContents":{"items":[{"url":"#writing-an-access-log","title":"Writing an access log"}]},"excerpt":"Writing an access log Configuring logging framework To write an access log, you need to configure a logging framework first. The following configurations are\\nsimple examples of  logback.xml  and  log4j2.xml  respectively. logback log4j2 Customizing a log …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-access-log"}},{"tableOfContents":{"items":[{"url":"#user-manual","title":"User manual"}]},"excerpt":"User manual What is Armeria? Armeria  is your go-to microservice framework for any situation. You can build any type of\\nmicroservice leveraging your favorite technologies, including  gRPC ,\\n Thrift ,  Kotlin ,\\n Retrofit ,  Reactive Streams ,\\n Spring Boot …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"index"}},{"tableOfContents":{"items":[{"url":"#calling-a-thrift-service","title":"Calling a Thrift service"}]},"excerpt":"Calling a Thrift service Let\'s assume we have the following Thrift IDL, served at  http://127.0.0.1:8080/hello , just like what we\\nused in  Running a Thrift service : Making a call starts from creating a client: Note that we added the serialization format…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-thrift"}},{"tableOfContents":{"items":[{"url":"#annotated-services","title":"Annotated services"}]},"excerpt":"Annotated services Visit  armeria-examples  to find a fully working example. Armeria provides a way to write an HTTP service using annotations. It helps a user make his or her code\\nsimple and easy to understand. A user is able to run an HTTP service by fe…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-annotated-service"}},{"tableOfContents":{"items":[{"url":"#configuring-cors","title":"Configuring CORS"}]},"excerpt":"Configuring CORS Armeria provides a way to configure Cross-origin resource sharing (CORS) policy for specific origins or\\nany origin via  type://CorsServiceBuilder . For more information about CORS,\\nvisit  Wikipedia\'s CORS page . Allowing any origin To con…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-cors"}},{"tableOfContents":{"items":[{"url":"#browsing-and-invoking-services-with-docservice","title":"Browsing and invoking services with DocService"}]},"excerpt":"Browsing and invoking services with  DocService type://DocService  is a single-page web application which provides the following useful features: Browsing the list of gRPC, Thrift or annotated services and their operations available in the server Invoking…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-docservice"}},{"tableOfContents":{"items":[{"url":"#server-basics","title":"Server basics"}]},"excerpt":"Server basics To start a server, you need to build it first. Use  type://ServerBuilder : Ports To serve anything, you need to specify which TCP/IP port you want to bind onto: Services Even if we opened a port, it\'s of no use if we didn\'t bind any services…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-basics"}},{"tableOfContents":{"items":[{"url":"#running-a-grpc-service","title":"Running a gRPC service"}]},"excerpt":"Running a gRPC service Visit  armeria-examples  to find a fully working example. Let\'s assume we have the following  gRPC  service definition: The Protobuf compiler will produce some Java code under the  com.example.grpc.hello  package.\\nThe most noteworth…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-grpc"}},{"tableOfContents":{"items":[{"url":"#embedding-a-servlet-container","title":"Embedding a servlet container"}]},"excerpt":"Embedding a servlet container You can make Armeria serve your JEE web application on the same JVM and TCP/IP port by embedding\\n Apache Tomcat  or  Jetty .\\nNeither Tomcat nor Jetty will open a server socket or accept an incoming connection.\\nAll HTTP reques…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-servlet"}},{"tableOfContents":{"items":[{"url":"#serving-server-sent-events","title":"Serving Server-Sent Events"}]},"excerpt":"Serving Server-Sent Events Visit  armeria-examples  to find a fully working example. A traditional web page has to send a request to the server in order to receive new data.\\nWith  Server-Sent Events , however, it is possible for a server to push a new dat…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-sse"}},{"tableOfContents":{"items":[{"url":"#running-a-thrift-service","title":"Running a Thrift service"}]},"excerpt":"Running a Thrift service Let\'s assume we have the following Thrift IDL: The Apache Thrift compiler will produce some Java code under the  com.example.thrift.hello  package.\\nThe most noteworthy one is  HelloService.java  which defines the service interface…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-thrift"}},{"tableOfContents":{"items":[{"url":"#serving-static-files","title":"Serving static files"}]},"excerpt":"Serving static files Visit  armeria-examples  to find a fully working example. Use  type://FileService  to serve static files under a certain directory.  type://FileService  supports\\n GET  and  HEAD  HTTP methods and will auto-fill  Date ,  Last-Modified …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-http-file"}},{"tableOfContents":{"items":[{"url":"#decorating-a-service","title":"Decorating a service"}]},"excerpt":"Decorating a service A \'decorating service\' (or a \'decorator\') is a service that wraps another service\\nto intercept an incoming request or an outgoing response. As its name says, it is an implementation of\\n the decorator pattern . Service decoration takes…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-decorator"}},{"tableOfContents":{"items":[{"url":"#setting-up-a-project","title":"Setting up a project"}]},"excerpt":"Setting up a project Requirements Java 8 (or later)  is required to build and run an application based on Armeria. Use Java 13 (or later) if you are a contributor who tries to build Armeria itself.\\nSee  CONTRIBUTING.md  for more information. Choosing the …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"setup"}}]}}}')},xCMr:function(e,t,a){"use strict";var r=a("81ph"),n=a("q1tI"),i=a.n(n),o=a("/94A"),c=a("+ejy");t.a=function(e){var t=r.data.allMdx.nodes;return i.a.createElement(c.a,Object.assign({},e,{candidateMdxNodes:t,index:o,prefix:"docs",pageTitleSuffix:"Armeria documentation"}))}},xex8:function(e,t,a){"use strict";a.r(t),a.d(t,"pageTitle",(function(){return o})),a.d(t,"_frontmatter",(function(){return c})),a.d(t,"default",(function(){return b}));var r=a("8o2o"),n=(a("q1tI"),a("7ljp")),i=a("xCMr"),o="Automatic retry",c={},s=function(e){return function(t){return console.warn("Component '"+e+"' was not imported, exported, or provided by MDXProvider as global scope"),Object(n.b)("div",t)}},l=s("Warning"),p=s("Tip"),m={pageTitle:o,_frontmatter:c},d=i.a;function b(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(n.b)(d,Object.assign({},m,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"automatic-retry",style:{position:"relative"}},Object(n.b)("a",Object.assign({parentName:"h1"},{href:"#automatic-retry","aria-label":"automatic retry permalink",className:"anchor before"}),Object(n.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(n.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Automatic retry"),Object(n.b)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object.assign({parentName:"li"},{href:"#retryingclient"}),"RetryingClient")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object.assign({parentName:"li"},{href:"#retryrule"}),"RetryRule")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object.assign({parentName:"li"},{href:"#backoff"}),"Backoff")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object.assign({parentName:"li"},{href:"#maxtotalattempts-vs-per-backoff-maxattempts"}),"maxTotalAttempts vs per-Backoff maxAttempts")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object.assign({parentName:"li"},{href:"#per-attempt-timeout"}),"Per-attempt timeout")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object.assign({parentName:"li"},{href:"#retryingclient-with-logging"}),"RetryingClient with logging")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object.assign({parentName:"li"},{href:"#retryingclient-with-circuit-breaker"}),"RetryingClient with circuit breaker")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object.assign({parentName:"li"},{href:"#see-also"}),"See also"))),Object(n.b)("p",null,"When a client gets an error response, it might want to retry the request depending on the response.\nThis can be accomplished using a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"/docs/client-decorator"}),"decorator"),", and Armeria provides the following\nimplementations out-of-the box."),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object.assign({parentName:"li"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object.assign({parentName:"li"},{href:"type://RetryingRpcClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingRpcClient.html"}),"type://RetryingRpcClient"))),Object(n.b)("p",null,"Both behave the same except for the different request and response types.\nSo, let's find out what we can do with ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient"),"."),Object(n.b)("h2",{id:"retryingclient",style:{position:"relative"}},Object(n.b)("a",Object.assign({parentName:"h2"},{href:"#retryingclient","aria-label":"retryingclient permalink",className:"anchor before"}),Object(n.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(n.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),Object(n.b)("inlineCode",{parentName:"h2"},"RetryingClient")),Object(n.b)("p",null,"You can just use the ",Object(n.b)("inlineCode",{parentName:"p"},"decorator()")," method in ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://ClientBuilder:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ClientBuilder.html"}),"type://ClientBuilder")," or ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://WebClientBuilder:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/WebClientBuilder.html"}),"type://WebClientBuilder")," to build a\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient"),". For example:"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import com.linecorp.armeria.client.WebClient;\nimport com.linecorp.armeria.client.retry.RetryingClient;\nimport com.linecorp.armeria.client.retry.RetryRule;\nimport com.linecorp.armeria.common.AggregatedHttpResponse;\n\nRetryRule rule = RetryRule.failsafe();\nWebClient client = WebClient.builder("http://example.com/hello")\n                            .decorator(RetryingClient.newDecorator(rule))\n                            .build();\n\nAggregatedHttpResponse res = client.execute(...).aggregate().join();\n')),Object(n.b)("p",null,"That's it. The client will keep attempting until it succeeds or the number of attempts exceeds the maximum\nnumber of total attempts. You can configure the ",Object(n.b)("inlineCode",{parentName:"p"},"maxTotalAttempts")," when making the decorator using\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient#newDecorator(RetryRule,int):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html#newDecorator(com.linecorp.armeria.client.retry.RetryRule,int)"}),"type://RetryingClient#newDecorator(RetryRule,int)"),". Meanwhile, the ",Object(n.b)("inlineCode",{parentName:"p"},"rule")," will decide to\nretry depending on the response. In this case, the client retries when it receives ",Object(n.b)("inlineCode",{parentName:"p"},"5xx")," response error or\nan exception is raised."),Object(n.b)("h2",{id:"retryrule",style:{position:"relative"}},Object(n.b)("a",Object.assign({parentName:"h2"},{href:"#retryrule","aria-label":"retryrule permalink",className:"anchor before"}),Object(n.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(n.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),Object(n.b)("inlineCode",{parentName:"h2"},"RetryRule")),Object(n.b)("p",null,"You can fluently build your own :api:",Object(n.b)("inlineCode",{parentName:"p"},"RetryRule"),"."),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.client.ResponseTimeoutException;\nimport com.linecorp.armeria.common.HttpStatus;\n\nBackoff myBackoff = ...;\nRetryRule.of(RetryRule.builder().onUnProcessed().thenBackoff(myBackoff),\n             RetryRule.builder().onException(ResponseTimeoutException.class).thenBackoff(),\n             RetryRule.builder().onStatus(HttpStatus.TOO_MANY_REQUESTS).thenNoRetry())\n")),Object(n.b)("p",null,"Or you can customize the ",Object(n.b)("strong",{parentName:"p"},"rule")," by implementing :api:",Object(n.b)("inlineCode",{parentName:"p"},"RetryRule"),"."),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.client.ClientRequestContext;\nimport com.linecorp.armeria.client.UnprocessedRequestException;\nimport com.linecorp.armeria.client.retry.Backoff;\nimport com.linecorp.armeria.client.retry.RetryDecision;\n\nnew RetryRule() {\n    Backoff backoff = Backoff.ofDefault();\n\n    @Override\n    public CompletionStage<RetryDecision> shouldRetry(ClientRequestContext ctx,\n                                                      @Nullable Throwable cause) {\n        if (cause != null) {\n            if (cause instanceof ResponseTimeoutException ||\n                cause instanceof UnprocessedRequestException) {\n                // The response timed out or the request has not been handled\n                // by the server.\n                return CompletableFuture.completedFuture(RetryDecision.retry(backoff));\n            }\n        }\n\n        if (ctx.log().responseHeaders().status() == HttpStatus.TOO_MANY_REQUESTS) {\n            return CompletableFuture.completedFuture(RetryDecision.stop());\n        }\n\n        // Return 'next()' to lookup other rules.\n        return CompletableFuture.completedFuture(RetryDecision.next());\n    }\n};\n")),Object(n.b)("p",null,"This will retry when one of ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://ResponseTimeoutException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ResponseTimeoutException.html"}),"type://ResponseTimeoutException")," and ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://UnprocessedRequestException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/UnprocessedRequestException.html"}),"type://UnprocessedRequestException")," is raised\nor the response's status is ",Object(n.b)("inlineCode",{parentName:"p"},"429 Too Many Requests"),"."),Object(n.b)(l,{mdxType:"Warning"},Object(n.b)("p",null,"We declare a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," as a member and reuse it when a ",Object(n.b)("inlineCode",{parentName:"p"},"rule")," returns it, so that we do not\nreturn a different ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," instance for each ",Object(n.b)("inlineCode",{parentName:"p"},"shouldRetry()"),". ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient"),"\ninternally tracks the reference of the returned ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," and increases the counter that keeps\nthe number of attempts made so far, and resets it to 0 when the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," returned by the retry rule\nis not the same as before. Therefore, it is important to return the same ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," instance unless\nyou decided to change your ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," strategy. If you do not return the same one, when the\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," yields a different delay based on the number of retries, such as an exponential backoff,\nit will not work as expected. We will take a close look into a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," at the next section.")),Object(n.b)(p,{mdxType:"Tip"},Object(n.b)("p",null,Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://UnprocessedRequestException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/UnprocessedRequestException.html"}),"type://UnprocessedRequestException")," literally means that the request has not been processed by the server.\nTherefore, you can safely retry the request without worrying about the idempotency of the request.\nFor more information about idempotency, please refer to\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"http://restcookbook.com/HTTP%20Methods/idempotency/"}),"What are idempotent and/or safe methods?"),".")),Object(n.b)("p",null,"You can return a different ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," according to the response status."),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.common.HttpStatusClass;\n\nBackoff backoffOnServerErrorOrTimeout = Backoff.ofDefault();\nBackoff backoffOnConflict = Backoff.fixed(100);\nRetryRule.builder()\n         .onException(ex -> ex instanceof ResponseTimeoutException ||\n                            ex instanceof UnprocessedRequestException)\n         .thenBackoff(backoffOnServerErrorOrTimeout)\n         .orElse(RetryRule.builder()\n                          .onStatusClass(HttpStatusClass.SERVER_ERROR)\n                          .thenBackoff(backoffOnServerErrorOrTimeout))\n         .orElse(RetryRule.builder()\n                          .onStatus(HttpStatus.CONFLICT)\n                          .thenBackoff(backoffOnConflict));\n")),Object(n.b)("p",null,"If you need to determine whether you need to retry by looking into the response content, you should implement\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryRuleWithContent:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryRuleWithContent.html"}),"type://RetryRuleWithContent")," and specify it when you create a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://WebClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/WebClient.html"}),"type://WebClient"),"\nusing ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClientBuilder:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClientBuilder.html"}),"type://RetryingClientBuilder"),":"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import com.linecorp.armeria.client.retry.RetryRuleWithContent;\n\nRetryRuleWithContent<HttpResponse> retryRule =\n        RetryRuleWithContent\n                .<HttpResponse>builder()\n                .onException(ex -> ex instanceof ResponseTimeoutException ||\n                                   ex instanceof UnprocessedRequestException)\n                .onResponse(response -> {\n                    return response.aggregate()\n                                   .thenApply(content -> "Should I retry?".equals(content.contentUtf8()));\n                })\n                .thenBackoff(backoff);\n\n// Create a WebClient with a retry rule.\nWebClient client = WebClient\n        .builder(...)\n        .decorator(RetryingClient.builder(retryRule)\n                                 .newDecorator())\n        .build();\n\nAggregatedHttpResponse res = client.execute(...).aggregate().join();\n')),Object(n.b)(p,{mdxType:"Tip"},Object(n.b)("p",null,"You might find the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Exceptions#peel(Throwable):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/util/Exceptions.html#peel(java.lang.Throwable)"}),"type://Exceptions#peel(Throwable)")," method useful when the exception you are trying to\nhandle is wrapped by exceptions like ",Object(n.b)("inlineCode",{parentName:"p"},"CompletionException")," and ",Object(n.b)("inlineCode",{parentName:"p"},"ExecutionException"),":"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.common.Exceptions;\n\n@Override\npublic CompletionStage<RetryDecision> shouldRetry(ClientRequestContext ctx,\n                                                  @Nullable Throwable cause) {\n    if (cause != null) {\n        if (cause instanceof ResponseTimeoutException ||\n            cause instanceof UnprocessedRequestException) {\n            // The response timed out or the request has not been handled\n            // by the server.\n            return CompletableFuture.completedFuture(backoff);\n        }\n\n        Throwable peeled = Exceptions.peel(cause);\n        if (peeled instanceof MyException) { ... }\n    }\n    ...\n}\n"))),Object(n.b)("h2",{id:"backoff",style:{position:"relative"}},Object(n.b)("a",Object.assign({parentName:"h2"},{href:"#backoff","aria-label":"backoff permalink",className:"anchor before"}),Object(n.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(n.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),Object(n.b)("inlineCode",{parentName:"h2"},"Backoff")),Object(n.b)("p",null,"You can use a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," to determine the delay between attempts. Armeria provides ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff"),"\nimplementations which produce the following delays out of the box:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Fixed delay, created with ",Object(n.b)("a",Object.assign({parentName:"li"},{href:"type://Backoff#fixed(long):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html#fixed(long)"}),"type://Backoff#fixed(long)")),Object(n.b)("li",{parentName:"ul"},"Random delay, created with ",Object(n.b)("a",Object.assign({parentName:"li"},{href:"type://Backoff#random(long,long):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html#random(long,long)"}),"type://Backoff#random(long,long)")),Object(n.b)("li",{parentName:"ul"},"Exponential delay which is multiplied on each attempt, created with ",Object(n.b)("a",Object.assign({parentName:"li"},{href:"type://Backoff#exponential(long,long):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html#exponential(long,long)"}),"type://Backoff#exponential(long,long)"))),Object(n.b)("p",null,"Armeria provides ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff#ofDefault():https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html#ofDefault()"}),"type://Backoff#ofDefault()")," that you might use by default. It is exactly the same as:"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"Backoff.exponential(200   /* minDelayMillis */,\n                    10000 /* maxDelayMillis */,\n                    2.0   /* multiplier     */)\n       .withJitter(0.2 /* jitterRate */);\n")),Object(n.b)("p",null,"The delay starts from ",Object(n.b)("inlineCode",{parentName:"p"},"minDelayMillis")," until it reaches ",Object(n.b)("inlineCode",{parentName:"p"},"maxDelayMillis")," multiplying by multiplier every\nretry. Please note that the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff#withJitter(double):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html#withJitter(double)"}),"type://Backoff#withJitter(double)")," will add jitter value to the calculated delay."),Object(n.b)("p",null,"For more information, please refer to the API documentation of the\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/package-summary.html"}),"com.linecorp.armeria.client.retry")," package."),Object(n.b)("h2",{id:"maxtotalattempts-vs-per-backoff-maxattempts",style:{position:"relative"}},Object(n.b)("a",Object.assign({parentName:"h2"},{href:"#maxtotalattempts-vs-per-backoff-maxattempts","aria-label":"maxtotalattempts vs per backoff maxattempts permalink",className:"anchor before"}),Object(n.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(n.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),Object(n.b)("inlineCode",{parentName:"h2"},"maxTotalAttempts")," vs per-Backoff ",Object(n.b)("inlineCode",{parentName:"h2"},"maxAttempts")),Object(n.b)("p",null,"If you create a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," using ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff#withMaxAttempts(int):https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html#withMaxAttempts(int)"}),"type://Backoff#withMaxAttempts(int)")," in a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryRule:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryRule.html"}),"type://RetryRule"),",\nthe ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," which uses the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryRule:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryRule.html"}),"type://RetryRule")," will stop retrying when the number of\nattempts passed ",Object(n.b)("inlineCode",{parentName:"p"},"maxAttempts"),". However, if you have more than one ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," and return one after\nthe other continuously, it will keep retrying over and over again because the counter that\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," internally tracks is initialized every time the different ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," is\nreturned. To limit the number of attempts in a whole retry session, ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," limits\nthe maximum number of total attempts to 10 by default. You can change this value by specifying\n",Object(n.b)("inlineCode",{parentName:"p"},"maxTotalAttempts")," when you build a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient"),":"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"RetryingClient.newDecorator(rule, maxTotalAttempts);\n")),Object(n.b)("p",null,"Or, you can override the default value of 10 using the JVM system property\n",Object(n.b)("inlineCode",{parentName:"p"},"-Dcom.linecorp.armeria.defaultMaxTotalAttempts=<integer>"),"."),Object(n.b)("p",null,"Note that when a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," stops due to the attempts limit, the client will get the last received\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Response:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/Response.html"}),"type://Response")," from the server."),Object(n.b)("h2",{id:"per-attempt-timeout",style:{position:"relative"}},Object(n.b)("a",Object.assign({parentName:"h2"},{href:"#per-attempt-timeout","aria-label":"per attempt timeout permalink",className:"anchor before"}),Object(n.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(n.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Per-attempt timeout"),Object(n.b)("p",null,Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://ResponseTimeoutException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ResponseTimeoutException.html"}),"type://ResponseTimeoutException")," can occur in two different situations while retrying. First, it occurs\nwhen the time of whole retry session has passed the time previously configured using:"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"ClientBuilder.responseTimeoutMillis(millis);\n// or..\nClientRequestContext.setResponseTimeoutAfterMillis(millis);\n")),Object(n.b)("p",null,"You cannot retry on this ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://ResponseTimeoutException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ResponseTimeoutException.html"}),"type://ResponseTimeoutException"),".\nSecond, it occurs when the time of individual attempt in retry has passed the time which is per-attempt timeout.\nYou can configure it when you create the decorator:"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"RetryingClient.newDecorator(rule, maxTotalAttempts,\n                            responseTimeoutMillisForEachAttempt);\n")),Object(n.b)("p",null,"You can retry on this ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://ResponseTimeoutException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ResponseTimeoutException.html"}),"type://ResponseTimeoutException"),"."),Object(n.b)("p",null,"For example, when making a retrying request to an unresponsive service\nwith ",Object(n.b)("inlineCode",{parentName:"p"},"responseTimeoutMillis = 10,000"),", ",Object(n.b)("inlineCode",{parentName:"p"},"responseTimeoutMillisForEachAttempt = 3,000")," and disabled\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff"),", the first three attempts will be timed out by the per-attempt timeout (3,000ms).\nThe 4th one will be aborted after 1,000ms since the request session has reached at 10,000ms before\nit is timed out by the per-attempt timeout."),Object(n.b)("span",{className:"remark-draw remark-draw-bob-svg"},Object(n.b)("object",Object.assign({parentName:"span"},{data:"/a40f882a8c864c5187831b5d808cf9ca91c97cbb.svg",role:"img","aria-label":""}))),Object(n.b)("p",null,"In the example above, every attempt is made before it is timed out because the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," is disabled.\nHowever, what if a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," is enabled and the moment of trying next attempt is after the point of\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://ResponseTimeoutException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/ResponseTimeoutException.html"}),"type://ResponseTimeoutException"),"? In such a case, the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," does not schedule for the\nnext attempt, but finishes the retry session immediately with the last received ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Response:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/Response.html"}),"type://Response"),".\nConsider the following example:"),Object(n.b)("span",{className:"remark-draw remark-draw-bob-svg"},Object(n.b)("object",Object.assign({parentName:"span"},{data:"/054162a9ab5eca026f5db10e21f107cc61cf860f.svg",role:"img","aria-label":""}))),Object(n.b)("p",null,"Unlike the example above, the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Backoff:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/Backoff.html"}),"type://Backoff")," is enabled and it makes the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," perform\nretries with 3-second delay. When the second attempt is finished at 9,000ms, the next attempt will be\nat 12,000ms exceeding the response timeout of 10,000ms.\nThe ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient"),", at this point, stops retrying and finished the retry session with the last\nreceived ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://Response:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/Response.html"}),"type://Response"),", retrieved at 9,000ms from the attempt 2."),Object(n.b)("h2",{id:"retryingclient-with-logging",style:{position:"relative"}},Object(n.b)("a",Object.assign({parentName:"h2"},{href:"#retryingclient-with-logging","aria-label":"retryingclient with logging permalink",className:"anchor before"}),Object(n.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(n.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),Object(n.b)("inlineCode",{parentName:"h2"},"RetryingClient")," with logging"),Object(n.b)("p",null,"You can use ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," with ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://LoggingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/logging/LoggingClient.html"}),"type://LoggingClient")," to log. If you want to log all of the\nrequests and responses, decorate ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://LoggingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/logging/LoggingClient.html"}),"type://LoggingClient")," with ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient"),". That is:"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"RetryRule rule = RetryRule.failsafe();\nWebClient client = WebClient.builder(...)\n                            .decorator(LoggingClient.newDecorator())\n                            .decorator(RetryingClient.newDecorator(rule))\n                            .build();\n")),Object(n.b)("p",null,"This will produce following logs when there are three attempts:"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{}),"Request: {startTime=..., length=..., duration=..., scheme=..., host=..., headers=[...]\nResponse: {startTime=..., length=..., duration=..., headers=[:status=500, ...]\nRequest: {startTime=..., ..., headers=[..., armeria-retry-count=1, ...]\nResponse: {startTime=..., length=..., duration=..., headers=[:status=500, ...]\nRequest: {startTime=..., ..., headers=[..., armeria-retry-count=2, ...]\nResponse: {startTime=..., length=..., duration=..., headers=[:status=200, ...]\n")),Object(n.b)(p,{mdxType:"Tip"},Object(n.b)("p",null,"Did you notice that the ",Object(n.b)("inlineCode",{parentName:"p"},"armeria-retry-count")," header is inserted from the second request?\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," inserts it to indicate the retry count of a request.\nThe server might use this value to reject excessive retries, etc.")),Object(n.b)("p",null,"If you want to log the first request and the last response, no matter if it's successful or not,\ndo the reverse:"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.client.logging.LoggingClient;\n\nRetryRule rule = RetryRule.failsafe();\n// Note the order of decoration.\nWebClient client = WebClient.builder(...)\n                            .decorator(RetryingClient.newDecorator(rule))\n                            .decorator(LoggingClient.newDecorator())\n                            .build();\n")),Object(n.b)("p",null,"This will produce single request and response log pair and the total number of attempts only, regardless\nhow many attempts are made:"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{}),"Request: {startTime=..., length=..., duration=..., scheme=..., host=..., headers=[...]\nResponse: {startTime=..., length=..., headers=[:status=200, ...]}, {totalAttempts=3}\n")),Object(n.b)(p,{mdxType:"Tip"},Object(n.b)("p",null,"Please refer to ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"/docs/advanced-structured-logging#nested-log"}),"Nested log"),",\nif you are curious about how this works internally.")),Object(n.b)("h2",{id:"retryingclient-with-circuit-breaker",style:{position:"relative"}},Object(n.b)("a",Object.assign({parentName:"h2"},{href:"#retryingclient-with-circuit-breaker","aria-label":"retryingclient with circuit breaker permalink",className:"anchor before"}),Object(n.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(n.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),Object(n.b)("inlineCode",{parentName:"h2"},"RetryingClient")," with circuit breaker"),Object(n.b)("p",null,"You might want to use ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"/docs/client-circuit-breaker"}),"Circuit breaker")," with ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," using\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"/docs/client-decorator"}),"Decorating a client"),":"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.client.circuitbreaker.CircuitBreakerStrategy;\nimport com.linecorp.armeria.client.circuitbreaker.CircuitBreakerClientBuilder;\n\nCircuitBreakerStrategy cbStrategy = CircuitBreakerStrategy.onServerErrorStatus();\nRetryRule myRetryRule = RetryRule.builder()\n                                 ...\n                                 .build();\n\nWebClient client = WebClient.builder(...)\n                            .decorator(CircuitBreakerClient.builder(cbStrategy)\n                                                           .newDecorator())\n                            .decorator(RetryingClient.builder(myRetryRule)\n                                                     .newDecorator())\n                            .build();\n\nAggregatedHttpResponse res = client.execute(...).aggregate().join();\n")),Object(n.b)("p",null,"This decorates ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://CircuitBreakerClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClient.html"}),"type://CircuitBreakerClient")," with ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," so that the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://CircuitBreaker:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/circuitbreaker/CircuitBreaker.html"}),"type://CircuitBreaker"),"\njudges every request and retried request as successful or failed. If the failure rate exceeds a certain\nthreshold, it raises a ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://FailFastException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/circuitbreaker/FailFastException.html"}),"type://FailFastException"),". When using both clients, you need to build a custom\n",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryRule:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryRule.html"}),"type://RetryRule")," to handle this exception so that the ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," does not attempt\na retry unnecessarily when the circuit is open, e.g."),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.client.circuitbreaker.FailFastException;\n\nRetryRule.of(RetryRule.builder()\n                      // The circuit is already open so stops retrying.\n                      .onException(FailFastException.class)\n                      .thenNoRetry(),\n             RetryRule.builder()\n                      .onException(ex -> ex instanceof ResponseTimeoutException ||\n                                         ex instanceof UnprocessedRequestException)\n                      .thenBackoff(),\n             // Implement the rest of your own rule.\n             ...);\n")),Object(n.b)(p,{mdxType:"Tip"},Object(n.b)("p",null,"You may want to allow retrying even on ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"type://FailFastException:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/circuitbreaker/FailFastException.html"}),"type://FailFastException")," when your endpoint is configured with\nclient-side load balancing because the next attempt might be sent to the next available endpoint.\nSee ",Object(n.b)("a",Object.assign({parentName:"p"},{href:"/docs/client-service-discovery"}),"Client-side load balancing and service discovery"),"\nfor more information.")),Object(n.b)("h2",{id:"see-also",style:{position:"relative"}},Object(n.b)("a",Object.assign({parentName:"h2"},{href:"#see-also","aria-label":"see also permalink",className:"anchor before"}),Object(n.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(n.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"See also"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object.assign({parentName:"li"},{href:"/docs/advanced-structured-logging"}),"Structured logging"))))}b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-docs-client-retry-mdx-742c6e4ef0cb751c53f9.js.map