(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{"/94A":function(e){e.exports=JSON.parse('{"root":["index","setup"],"References":{"Community articles":"/community/articles","API documentation":"https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/index.html","Release notes":"/release-notes"},"Server":["server-basics","server-decorator","server-grpc","server-thrift","server-docservice","server-annotated-service","server-http-file","server-servlet","server-access-log","server-cors","server-sse"],"Client":["client-http","client-thrift","client-grpc","client-decorator","client-retrofit","client-custom-http-headers","client-timeouts","client-retry","client-circuit-breaker","client-service-discovery"],"Advanced":["advanced-logging","advanced-structured-logging","advanced-custom-attributes","advanced-structured-logging-kafka","advanced-unit-testing","advanced-production-checklist","advanced-zipkin","advanced-zookeeper","advanced-saml","advanced-spring-webflux-integration","advanced-dropwizard-integration"]}')},"81ph":function(e){e.exports=JSON.parse('{"data":{"allMdx":{"nodes":[{"tableOfContents":{"items":[{"url":"#requestcontext-custom-attributes","title":"RequestContext custom attributes"}]},"excerpt":"RequestContext  custom attributes When you are using multiple decorators, you might want to pass some value to the next decorator.\\nYou can do this by attaching attributes to a  type://RequestContext . To attach an attribute,\\nyou need to define an  Attribu…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-custom-attributes"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-dropwizard","title":"Using Armeria with Dropwizard"}]},"excerpt":"Using Armeria with Dropwizard Visit  armeria-examples  to find a fully \\nworking example. Dropwizard provides many features which are necessary for building a web application, such as metrics,\\nmodel validation, externalized and extensible configuration, et…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-dropwizard-integration"}},{"tableOfContents":{"items":[{"url":"#logging-contextual-information","title":"Logging contextual information"}]},"excerpt":"Logging contextual information With Armeria\'s  Logback  integration, you can log the properties of the\\n type://RequestContext  of the request being handled.  type://RequestContextExportingAppender  is\\na Logback appender that exports the properties of the …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-logging"}},{"tableOfContents":{"items":[{"url":"#saml-single-sign-on","title":"SAML Single Sign-On"}]},"excerpt":"SAML Single Sign-On Visit  armeria-examples  to find a fully working example. What is SAML? Security Assertion Markup Language (SAML) \\nis an open standard for exchanging authentication and authorization data between an identity provider and\\na service prov…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-saml"}},{"tableOfContents":{"items":[{"url":"#using-armeria-with-spring-webflux","title":"Using Armeria with Spring WebFlux"}]},"excerpt":"Using Armeria with Spring WebFlux Visit  armeria-examples  to find a fully working example. Spring framework provides powerful features which are necessary for building a web application, such as\\ndependency injection, data binding, AOP, transaction, etc. …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-spring-webflux-integration"}},{"tableOfContents":{"items":[{"url":"#structured-logging","title":"Structured logging"}]},"excerpt":"Structured logging Although traditional logging is a useful tool to diagnose the behavior of an application, it has its own\\nproblem; the resulting log messages are not always machine-friendly. This section explains the Armeria API for\\nretrieving the infor…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-structured-logging"}},{"tableOfContents":{"items":[{"url":"#unit-testing-client-and-service","title":"Unit-testing Client and Service"}]},"excerpt":"Unit-testing  Client  and  Service A unit test of a client or a service will require you to prepare two objects: type://ClientRequestContext  or  type://ServiceRequestContext type://HttpRequest  or  type://RpcRequest type://ClientRequestContext  or  type:…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-unit-testing"}},{"tableOfContents":{"items":[{"url":"#production-checklist","title":"Production checklist"}]},"excerpt":"Production checklist Note that the advices in this page are not always applicable for every use case and thus should be\\napplied with caution. Do not apply the changes you really do not need. You may want to consider the following options before putting yo…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-production-checklist"}},{"tableOfContents":{"items":[{"url":"#structured-logging-with-kafka","title":"Structured logging with Kafka"}]},"excerpt":"Structured logging with Kafka TBW - See  type://KafkaAccessLogWriter .","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-structured-logging-kafka"}},{"tableOfContents":{"items":[{"url":"#zipkin-integration","title":"Zipkin integration"}]},"excerpt":"Zipkin integration If you want to troubleshoot latency problems in microservice architecture, you will want to use distributed\\ntracing system such as  Zipkin . It gathers timing data and shows which component is\\nfailing or taking more time than others in …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-zipkin"}},{"tableOfContents":{"items":[{"url":"#service-discovery-with-zookeeper","title":"Service discovery with ZooKeeper"}]},"excerpt":"Service discovery with ZooKeeper Automatic service registration Use  type://ZooKeeperUpdatingListener  and  type://ZooKeeperRegistrationSpec  to register your server\\nto a ZooKeeper cluster: The  type://ZooKeeperRegistrationSpec  is used to convert the inf…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"advanced-zookeeper"}},{"tableOfContents":{"items":[{"url":"#sending-custom-http-headers","title":"Sending custom HTTP headers"}]},"excerpt":"Sending custom HTTP headers When sending an RPC request, it is sometimes required to send HTTP headers with it, such as an authentication token.\\nThere are four ways to customize the HTTP headers of your RPC request: Using the  type://Clients#withHttpHeade…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-custom-http-headers"}},{"tableOfContents":{"items":[{"url":"#circuit-breaker","title":"Circuit breaker"}]},"excerpt":"Circuit breaker In microservice architecture, it\'s common that various services running on different machines are connected to\\neach other through remote calls. If one of the services becomes unreachable somehow such as due to network\\nissues, the client wh…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-circuit-breaker"}},{"tableOfContents":{"items":[{"url":"#decorating-a-client","title":"Decorating a client"}]},"excerpt":"Decorating a client A \'decorating client\' (or a \'decorator\') is a client that wraps another client to intercept an outgoing\\nrequest or an incoming response. As its name says, it is an implementation of  the decorator pattern .\\nClient decoration takes a cr…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-decorator"}},{"tableOfContents":{"items":[{"url":"#calling-a-grpc-service","title":"Calling a gRPC service"}]},"excerpt":"Calling a gRPC service Visit  armeria-examples  to find a fully working example. Let\'s assume we have the following  gRPC  service definition, served at  http://127.0.0.1:8080/ , just like\\nwhat we used in  Running a gRPC service : Making a call starts fro…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-grpc"}},{"tableOfContents":{"items":[{"url":"#calling-an-http-service","title":"Calling an HTTP service"}]},"excerpt":"Calling an HTTP service See also Retrofit integration","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-http"}},{"tableOfContents":{"items":[{"url":"#automatic-retry","title":"Automatic retry"}]},"excerpt":"Automatic retry When a client gets an error response, it might want to retry the request depending on the response.\\nThis can be accomplished using a  decorator , and Armeria provides the following\\nimplementations out-of-the box. type://RetryingClient type…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-retry"}},{"tableOfContents":{"items":[{"url":"#client-side-load-balancing-and-service-discovery","title":"Client-side load balancing and service discovery"}]},"excerpt":"Client-side load balancing and service discovery You can configure an Armeria client to distribute its requests to more than one server autonomously, unlike\\ntraditional server-side load balancing where the requests go through a dedicated load balancer suc…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-service-discovery"}},{"tableOfContents":{"items":[{"url":"#overriding-client-timeouts","title":"Overriding client timeouts"}]},"excerpt":"Overriding client timeouts Sometimes, the default timeouts used by the Armeria clients do not suit a particular scenario well.\\nIn these cases, you might want to override the timeout settings. Using  ClientBuilder Adjusting connection-level timeouts You ne…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-timeouts"}},{"tableOfContents":{"items":[{"url":"#retrofit-integration","title":"Retrofit integration"}]},"excerpt":"Retrofit integration Retrofit  is a library that simplifies the access to RESTful services\\nby turning an HTTP API into a Java interface. Armeria provides a builder class called  type://ArmeriaRetrofit  that builds an alternative\\n Retrofit  implementation …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-retrofit"}},{"tableOfContents":{"items":[{"url":"#writing-an-access-log","title":"Writing an access log"}]},"excerpt":"Writing an access log Configuring logging framework To write an access log, you need to configure a logging framework first. The following configurations are\\nsimple examples of  logback.xml  and  log4j2.xml  respectively. logback log4j2 Customizing a log …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-access-log"}},{"tableOfContents":{"items":[{"url":"#user-manual","title":"User manual"}]},"excerpt":"User manual What is Armeria? Armeria  is your go-to microservice framework for any situation. You can build any type of\\nmicroservice leveraging your favorite technologies, including  gRPC ,\\n Thrift ,  Kotlin ,\\n Retrofit ,  Reactive Streams ,\\n Spring Boot …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"index"}},{"tableOfContents":{"items":[{"url":"#calling-a-thrift-service","title":"Calling a Thrift service"}]},"excerpt":"Calling a Thrift service Let\'s assume we have the following Thrift IDL, served at  http://127.0.0.1:8080/hello , just like what we\\nused in  Running a Thrift service : Making a call starts from creating a client: Note that we added the serialization format…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"client-thrift"}},{"tableOfContents":{"items":[{"url":"#annotated-services","title":"Annotated services"}]},"excerpt":"Annotated services Visit  armeria-examples  to find a fully working example. Armeria provides a way to write an HTTP service using annotations. It helps a user make his or her code\\nsimple and easy to understand. A user is able to run an HTTP service by fe…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-annotated-service"}},{"tableOfContents":{"items":[{"url":"#configuring-cors","title":"Configuring CORS"}]},"excerpt":"Configuring CORS Armeria provides a way to configure Cross-origin resource sharing (CORS) policy for specific origins or\\nany origin via  type://CorsServiceBuilder . For more information about CORS,\\nvisit  Wikipedia\'s CORS page . Allowing any origin To con…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-cors"}},{"tableOfContents":{"items":[{"url":"#browsing-and-invoking-services-with-docservice","title":"Browsing and invoking services with DocService"}]},"excerpt":"Browsing and invoking services with  DocService type://DocService  is a single-page web application which provides the following useful features: Browsing the list of gRPC, Thrift or annotated services and their operations available in the server Invoking…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-docservice"}},{"tableOfContents":{"items":[{"url":"#server-basics","title":"Server basics"}]},"excerpt":"Server basics To start a server, you need to build it first. Use  type://ServerBuilder : Ports To serve anything, you need to specify which TCP/IP port you want to bind onto: Services Even if we opened a port, it\'s of no use if we didn\'t bind any services…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-basics"}},{"tableOfContents":{"items":[{"url":"#running-a-grpc-service","title":"Running a gRPC service"}]},"excerpt":"Running a gRPC service Visit  armeria-examples  to find a fully working example. Let\'s assume we have the following  gRPC  service definition: The Protobuf compiler will produce some Java code under the  com.example.grpc.hello  package.\\nThe most noteworth…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-grpc"}},{"tableOfContents":{"items":[{"url":"#embedding-a-servlet-container","title":"Embedding a servlet container"}]},"excerpt":"Embedding a servlet container You can make Armeria serve your JEE web application on the same JVM and TCP/IP port by embedding\\n Apache Tomcat  or  Jetty .\\nNeither Tomcat nor Jetty will open a server socket or accept an incoming connection.\\nAll HTTP reques…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-servlet"}},{"tableOfContents":{"items":[{"url":"#serving-server-sent-events","title":"Serving Server-Sent Events"}]},"excerpt":"Serving Server-Sent Events Visit  armeria-examples  to find a fully working example. A traditional web page has to send a request to the server in order to receive new data.\\nWith  Server-Sent Events , however, it is possible for a server to push a new dat…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-sse"}},{"tableOfContents":{"items":[{"url":"#running-a-thrift-service","title":"Running a Thrift service"}]},"excerpt":"Running a Thrift service Let\'s assume we have the following Thrift IDL: The Apache Thrift compiler will produce some Java code under the  com.example.thrift.hello  package.\\nThe most noteworthy one is  HelloService.java  which defines the service interface…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-thrift"}},{"tableOfContents":{"items":[{"url":"#serving-static-files","title":"Serving static files"}]},"excerpt":"Serving static files Visit  armeria-examples  to find a fully working example. Use  type://FileService  to serve static files under a certain directory.  type://FileService  supports\\n GET  and  HEAD  HTTP methods and will auto-fill  Date ,  Last-Modified …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-http-file"}},{"tableOfContents":{"items":[{"url":"#decorating-a-service","title":"Decorating a service"}]},"excerpt":"Decorating a service A \'decorating service\' (or a \'decorator\') is a service that wraps another service\\nto intercept an incoming request or an outgoing response. As its name says, it is an implementation of\\n the decorator pattern . Service decoration takes…","parent":{"__typename":"File","sourceInstanceName":"docs","name":"server-decorator"}},{"tableOfContents":{"items":[{"url":"#setting-up-a-project","title":"Setting up a project"}]},"excerpt":"Setting up a project Requirements Java 8 (or later)  is required to build and run an application based on Armeria. Use Java 13 (or later) if you are a contributor who tries to build Armeria itself.\\nSee  CONTRIBUTING.md  for more information. Choosing the …","parent":{"__typename":"File","sourceInstanceName":"docs","name":"setup"}}]}}}')},Wp6k:function(e,t,n){"use strict";n.r(t),n.d(t,"pageTitle",(function(){return s})),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return m}));var a,r=n("8o2o"),i=(n("q1tI"),n("7ljp")),o=n("xCMr"),s="Structured logging",c={},p=(a="Tip",function(e){return console.warn("Component '"+a+"' was not imported, exported, or provided by MDXProvider as global scope"),Object(i.b)("div",e)}),l={pageTitle:s,_frontmatter:c},b=o.a;function m(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)(b,Object.assign({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"structured-logging",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h1"},{href:"#structured-logging","aria-label":"structured logging permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Structured logging"),Object(i.b)("h6",{className:"inlinePageToc",role:"navigation"},"Table of contents"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object.assign({parentName:"p"},{href:"#what-properties-can-be-retrieved"}),"What properties can be retrieved?")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#request-properties"}),"Request properties")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#response-properties"}),"Response properties")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#client-connection-timing-properties"}),"Client connection timing properties")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object.assign({parentName:"p"},{href:"#availability-of-properties"}),"Availability of properties")),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"#availability-of-client-timing-properties"}),"Availability of client timing properties")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object.assign({parentName:"p"},{href:"#enabling-content-previews"}),"Enabling content previews"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("a",Object.assign({parentName:"p"},{href:"#nested-log"}),"Nested log")))),Object(i.b)("p",null,"Although traditional logging is a useful tool to diagnose the behavior of an application, it has its own\nproblem; the resulting log messages are not always machine-friendly. This section explains the Armeria API for\nretrieving the information collected during request life cycle in a machine-friendly way."),Object(i.b)("h2",{id:"what-properties-can-be-retrieved",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h2"},{href:"#what-properties-can-be-retrieved","aria-label":"what properties can be retrieved permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"What properties can be retrieved?"),Object(i.b)("p",null,Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog")," provides various properties recorded while handling a request:"),Object(i.b)("h3",{id:"request-properties",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h3"},{href:"#request-properties","aria-label":"request properties permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Request properties"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("div",{style:{width:"13rem"}},"Property")),Object(i.b)("th",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"th"},"Description")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestStartTimeMicros"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"when the request processing started, in microseconds since the\nepoch (01-Jan-1970 00:00:00 UTC)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration took to process the request completely"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestLength"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the byte length of the request content"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestCause"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the cause of request processing failure (if any)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"sessionProtocol"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the protocol of the connection (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"H2C"),")"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"serializationFormat"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the serialization format of the content (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"tbinary"),", ",Object(i.b)("inlineCode",{parentName:"p"},"none"),")"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"name"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the human-readable simple name of the request, such as:"),Object(i.b)("ul",{parentName:"td"},Object(i.b)("li",{parentName:"ul"},"gRPC - A capitalized method name defined in\n",Object(i.b)("inlineCode",{parentName:"li"},"io.grpc.MethodDescriptor")," (e.g, ",Object(i.b)("inlineCode",{parentName:"li"},"GetItems"),")"),Object(i.b)("li",{parentName:"ul"},"Thrift and annotated service - a method name (e.g, ",Object(i.b)("inlineCode",{parentName:"li"},"getItems"),")"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"type://HttpService:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/HttpService.html"}),"type://HttpService")," - an HTTP method name")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"serviceName"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the human-readable name of the service that served the request,\nsuch as:"),Object(i.b)("ul",{parentName:"td"},Object(i.b)("li",{parentName:"ul"},"gRPC - a service name (e.g, ",Object(i.b)("inlineCode",{parentName:"li"},"com.foo.GrpcService"),")"),Object(i.b)("li",{parentName:"ul"},"Thrift - a service type (e.g, ",Object(i.b)("inlineCode",{parentName:"li"},"com.foo.ThriftService$AsyncIface")," or\n",Object(i.b)("inlineCode",{parentName:"li"},"com.foo.ThriftService$Iface})")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object.assign({parentName:"li"},{href:"type://HttpService:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/HttpService.html"}),"type://HttpService")," and annotated service - an innermost class\nname")))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"host"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the name of the virtual host that serves the request"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestHeaders"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the HTTP headers of the request.\nthe header contains the method (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"GET"),", ",Object(i.b)("inlineCode",{parentName:"p"},"POST"),"),\nthe path (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"/thrift/foo"),"),\nthe query (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"foo=bar&bar=baz"),"), the content type, etc."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestContent"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the serialization-dependent content object of the request.\n",Object(i.b)("inlineCode",{parentName:"p"},"ThriftCall")," for Thrift. ",Object(i.b)("inlineCode",{parentName:"p"},"null")," otherwise."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"requestContentPreview"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the preview of the request content"))))),Object(i.b)("h3",{id:"response-properties",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h3"},{href:"#response-properties","aria-label":"response properties permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Response properties"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("div",{style:{width:"13rem"}},"Property")),Object(i.b)("th",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"th"},"Description")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseStartTimeMicros"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"when the response processing started, in microseconds since the\nepoch (01-Jan-1970 00:00:00 UTC)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration took to process the response completely"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseLength"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the byte length of the response content"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseCause"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the cause of response processing failure (if any)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"totalDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration between the request start and the response end\n(i.e. response time)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseHeaders"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the HTTP headers of the response.\nthe header contains the statusCode (e.g. 404), the content type, etc."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseContent"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the serialization-dependent content object of the response.\n",Object(i.b)("inlineCode",{parentName:"p"},"ThriftReply")," for Thrift. ",Object(i.b)("inlineCode",{parentName:"p"},"null")," otherwise."))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"responseContentPreview"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the preview of the response content"))))),Object(i.b)("h3",{id:"client-connection-timing-properties",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h3"},{href:"#client-connection-timing-properties","aria-label":"client connection timing properties permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Client connection timing properties"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("div",{style:{width:"20rem"}},"Property")),Object(i.b)("th",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"th"},"Description")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"connectionAcquisitionStartTimeMicros"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"when the client started to acquire a connection, in microseconds\nsince the epoch (01-Jan-1970 00:00:00 UTC)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"connectionAcquisitionDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration took to get a connection (i.e. the total duration)"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"dnsResolutionStartTimeMicros"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"when the client started to resolve a domain name, in microseconds\nsince the epoch (01-Jan-1970 00:00:00 UTC), ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," if DNS lookup\ndid not occur"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"dnsResolutionDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration took to resolve a domain name, ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," if DNS lookup\ndid not occur"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"socketConnectStartTimeMicros"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"when the client started to connect to a remote peer, in\nmicroseconds since the epoch (01-Jan-1970 00:00:00 UTC), ",Object(i.b)("inlineCode",{parentName:"p"},"-1"),"\nif socket connection attempt did not occur"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"socketConnectDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration took to connect to a remote peer, ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," if socket\nconnection attempt did not occur"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"pendingAcquisitionStartTimeMicros"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"when the client started to wait for the completion of an existing\nconnection attempt, in microseconds since the\nepoch (01-Jan-1970 00:00:00 UTC), ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," if waiting did not occur"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},Object(i.b)("inlineCode",{parentName:"p"},"pendingAcquisitionDurationNanos"))),Object(i.b)("td",Object.assign({parentName:"tr"},{colspan:1,rowspan:1}),Object(i.b)("p",{parentName:"td"},"the duration took to wait for the completion of an existing\nconnection attempt to use one connection in HTTP/2, ",Object(i.b)("inlineCode",{parentName:"p"},"-1")," if\nwaiting did not occur"))))),Object(i.b)("p",null,"The total duration is the sum of ",Object(i.b)("inlineCode",{parentName:"p"},"dnsResolutionDurationNanos"),", ",Object(i.b)("inlineCode",{parentName:"p"},"socketConnectDurationNanos")," and\n",Object(i.b)("inlineCode",{parentName:"p"},"pendingAcquisitionDurationNanos"),". They may or may not occur depending on circumstances.\nThese are some of the scenarios how the total duration is composed of:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Resolving a domain name and connecting to the remote peer.")),Object(i.b)("span",{className:"remark-draw remark-draw-bob-svg"},Object(i.b)("object",Object.assign({parentName:"span"},{data:"/764f386253af0f60fca9193075dacedc3684677b.svg",role:"img","aria-label":""}))),Object(i.b)("ol",{start:2},Object(i.b)("li",{parentName:"ol"},"Waiting for the connection to be established, since there's an existing connection attempt, to use one\nconnection in HTTP/2. (Note that, if you create a client with an IP address, ",Object(i.b)("inlineCode",{parentName:"li"},"dnsResolution")," did not\noccur. Also note that, there's no ",Object(i.b)("inlineCode",{parentName:"li"},"socketConnect")," because the client just waits for the connection and\nuses it.)")),Object(i.b)("span",{className:"remark-draw remark-draw-bob-svg"},Object(i.b)("object",Object.assign({parentName:"span"},{data:"/22d7143a397492a9653dd5dc4cee3c28fa7d23e5.svg",role:"img","aria-label":""}))),Object(i.b)("ol",{start:3},Object(i.b)("li",{parentName:"ol"},"Connecting to the remote peer with the resolved IP address after the existing connection attempt is\nfailed.")),Object(i.b)("span",{className:"remark-draw remark-draw-bob-svg"},Object(i.b)("object",Object.assign({parentName:"span"},{data:"/82033e1bd6ea352d4c7efe5810bd9fc1dbee0874.svg",role:"img","aria-label":""}))),Object(i.b)("h2",{id:"availability-of-properties",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h2"},{href:"#availability-of-properties","aria-label":"availability of properties permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Availability of properties"),Object(i.b)("p",null,"Armeria handles requests and responses in a stream-oriented way, which means that some properties are revealed\nonly after the streams are processed to some point. For example, there's no way to know the ",Object(i.b)("inlineCode",{parentName:"p"},"requestLength"),"\nuntil the request processing ends. Also, some properties related to the (de)serialization of request content,\nsuch as ",Object(i.b)("inlineCode",{parentName:"p"},"serializationFormat")," and ",Object(i.b)("inlineCode",{parentName:"p"},"requestContent"),", will not be available when request processing just\nstarted."),Object(i.b)("p",null,"The collected properties must be accessed via ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLogAccess:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLogAccess.html"}),"type://RequestLogAccess"),", which provides a safe access to the\ncollected properties via the following methods:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isComplete()")," or ",Object(i.b)("inlineCode",{parentName:"li"},"whenComplete()")," to check if or to get notified when all request and response\nproperties are available."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isRequestComplete()")," or ",Object(i.b)("inlineCode",{parentName:"li"},"whenRequestComplete()")," to check if or to get notified when all request\nproperties are available."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"isAvailable(RequestLogProperty...)")," or ",Object(i.b)("inlineCode",{parentName:"li"},"whenAvailable(RequestLogProperty...)")," to check if or to get\nnotified when a certain set of properties are available.")),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import com.linecorp.armeria.common.HttpRequest;\nimport com.linecorp.armeria.common.HttpResponse;\nimport com.linecorp.armeria.common.logging.RequestLog;\nimport com.linecorp.armeria.common.logging.RequestLogProperty;\nimport com.linecorp.armeria.server.ServiceRequestContext;\nimport com.linecorp.armeria.server.AbstractHttpService;\n\nHttpService myService = (ctx, req) -> {\n    final RequestLogAccess logAccess = ctx.log();\n\n    logAccess.whenAvailable(RequestLogProperty.REQUEST_HEADERS)\n             .thenAccept(log -> {\n                 assert log.isAvailable(RequestLogProperty.REQUEST_HEADERS);\n                 System.err.println("Started to handle a request: " +\n                                    log.requestHeaders());\n             });\n\n    logAccess.whenComplete()\n             .thenAccept(log -> {\n                 assert log.isComplete();\n                 System.err.println("Handled a request: " + log);\n             });\n    ...\n}\n')),Object(i.b)("h3",{id:"availability-of-client-timing-properties",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h3"},{href:"#availability-of-client-timing-properties","aria-label":"availability of client timing properties permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Availability of client timing properties"),Object(i.b)("p",null,"On the client side, you can also get the timing information about the related connection attempt. Unlike\nrequest and response properties, you need to use ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://ClientConnectionTimings:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/ClientConnectionTimings.html"}),"type://ClientConnectionTimings")," as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'import com.linecorp.armeria.client.ClientConnectionTimings;\nimport com.linecorp.armeria.client.WebClient;\n\nWebClient client = WebClient\n    .builder("http://armeria.com")\n    .decorator((delegate, ctx, req) -> {\n        // Can get as soon as a request is started.\n        ctx.log().whenAvailable(RequestLogProperty.REQUEST_START_TIME)\n           .thenAccept(log -> {\n               final ClientConnectionTimings timings = ClientConnectionTimings.get(log);\n               if (timings != null) {\n                   System.err.println("Connection acquisition duration: " +\n                                      timings.connectionAcquisitionDurationNanos());\n               }\n           });\n        return delegate.execute(ctx, req);\n    })\n    .build();\n')),Object(i.b)(p,{mdxType:"Tip"},Object(i.b)("p",null,"The reason why we used the static method is that the ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://ClientConnectionTimings:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/ClientConnectionTimings.html"}),"type://ClientConnectionTimings")," is stored using\nthe attribute. See ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"/docs/advanced-custom-attributes"}),"RequestContext custom attributes")," for more information.")),Object(i.b)("h2",{id:"enabling-content-previews",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h2"},{href:"#enabling-content-previews","aria-label":"enabling content previews permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Enabling content previews"),Object(i.b)("p",null,"Armeria provides the ",Object(i.b)("inlineCode",{parentName:"p"},"requestContentPreview")," and ",Object(i.b)("inlineCode",{parentName:"p"},"responseContentPreview")," properties in ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog"),"\nto retrieve the textual representation of the first N bytes of the request and response content.\nHowever, the properties are disabled by default due to performance overhead and thus they return ",Object(i.b)("inlineCode",{parentName:"p"},"null"),"\nby default. You can enable it using ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://ContentPreviewingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/logging/ContentPreviewingClient.html"}),"type://ContentPreviewingClient")," and ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://ContentPreviewingService:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/server/logging/ContentPreviewingService.html"}),"type://ContentPreviewingService"),"\ndecorators."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.server.logging.ContentPreviewingService;\nimport com.linecorp.armeria.server.ServerBuilder;\n\nServerBuilder sb = Server.builder();\n...\n// Enable previewing the content with the maximum length of 100 for textual content.\nsb.decorator(ContentPreviewingService.newDecorator(100));\n...\nsb.build();\n")),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.client.logging.ContentPreviewingClient;\nimport com.linecorp.armeria.client.WebClientBuilder;\n\nWebClientBuilder cb = WebClient.builder();\n...\ncb.decorator(ContentPreviewingClient.newDecorator(100));\n")),Object(i.b)("p",null,"Note that the above decorators enable the previews only for textual content\nwhich meets one of the following cases:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"when its type matches ",Object(i.b)("inlineCode",{parentName:"li"},"text/*")," or ",Object(i.b)("inlineCode",{parentName:"li"},"application/x-www-form-urlencoded"),"."),Object(i.b)("li",{parentName:"ul"},"when its charset has been specified. e.g. application/json; charset=utf-8."),Object(i.b)("li",{parentName:"ul"},"when its subtype is ",Object(i.b)("inlineCode",{parentName:"li"},"xml")," or ",Object(i.b)("inlineCode",{parentName:"li"},"json"),". e.g. application/xml, application/json."),Object(i.b)("li",{parentName:"ul"},"when its subtype ends with ",Object(i.b)("inlineCode",{parentName:"li"},"+xml")," or ",Object(i.b)("inlineCode",{parentName:"li"},"+json"),". e.g. application/atom+xml, application/hal+json")),Object(i.b)("p",null,"You can also customize the previews by specifying your own ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://ContentPreviewerFactory:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/ContentPreviewerFactory.html"}),"type://ContentPreviewerFactory")," implementation.\nThe following example enables the textual preview of first 100 characters for the content type of ",Object(i.b)("inlineCode",{parentName:"p"},"text/*"),",\nand the hex dump preview of first 100 characters for the content type of ",Object(i.b)("inlineCode",{parentName:"p"},"application/binary"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import io.netty.buffer.ByteBufUtil;\nimport com.linecorp.armeria.common.MediaType;\nimport com.linecorp.armeria.common.logging.ContentPreviewer;\nimport com.linecorp.armeria.common.logging.ContentPreviewerFactoryBuilder;\n\nServerBuilder sb = Server.builder();\n\nContentPreviewerFactoryBuilder builder = ContentPreviewerFactory.builder().maxLength(100);\nbuilder.text(StandardCharsets.UTF_8 /* default charset */, (ctx, headers) -> {\n    final MediaType contentType = headers.contentType();\n    // Produces the textual preview when the content type is ANY_TEXT_TYPE.\n    if (contentType != null && contentType.is(MediaType.ANY_TEXT_TYPE)) {\n        return true;\n    }\n    return false;\n});\n\n// Produces the hex dump when the content type is APPLICATION_BINARY.\nbuilder.binary(MediaType.APPLICATION_BINARY);\n\nsb.decorator(ContentPreviewingService.newDecorator(builder.build()));\n")),Object(i.b)("p",null,"You can write your own producer to change the way to make the preview, e.g."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"ContentPreviewerFactoryBuilder builder = ContentPreviewerFactory.builder();\nbuilder.binary(MediaTypeSet.of(MediaType.APPLICATION_BINARY),\n               (headers, byteBuf) -> {\n                   // You can use the byteBuf to produce your own way.\n               });\n...\nServerBuilder sb = Server.builder();\n...\nsb.decorator(ContentPreviewingService.newDecorator(builder.build()));\n")),Object(i.b)("h2",{id:"nested-log",style:{position:"relative"}},Object(i.b)("a",Object.assign({parentName:"h2"},{href:"#nested-log","aria-label":"nested log permalink",className:"anchor before"}),Object(i.b)("svg",Object.assign({parentName:"a"},{"aria-hidden":"true",focusable:"false",height:"16",version:"1.1",viewBox:"0 0 16 16",width:"16"}),Object(i.b)("path",Object.assign({parentName:"svg"},{fillRule:"evenodd",d:"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"})))),"Nested log"),Object(i.b)("p",null,"When you retry a failed attempt, you might want to record the result of each attempt and to group them under\na single ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog"),". A ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog")," can contain more than one child ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog"),"\nto support this sort of use cases."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"import com.linecorp.armeria.common.logging.RequestLogBuilder;\n\nRequestLogBuilder.addChild(RequestLog);\n")),Object(i.b)("p",null,"If the added ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog")," is the first child, the request-side log of the ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog")," will\nbe propagated to the parent log. You can add as many child logs as you want, but the rest of logs would not\nbe affected. If you want to fill the response-side log of the parent log, please invoke:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),"RequestLogBuilder.endResponseWithLastChild();\n")),Object(i.b)("p",null,"This will propagate the response-side log of the last added child to the parent log. The following diagram\nillustrates how a ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RequestLog:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/common/logging/RequestLog.html"}),"type://RequestLog")," with child logs looks like:"),Object(i.b)("span",{className:"remark-draw remark-draw-bob-svg"},Object(i.b)("object",Object.assign({parentName:"span"},{data:"/5e4eef4259d60989e3f219d9b6734136a8cebdc7.svg",role:"img","aria-label":""}))),Object(i.b)("p",null,"You can retrieve the child logs using ",Object(i.b)("inlineCode",{parentName:"p"},"RequestLog.children()"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-java"}),'final RequestContext ctx = ...;\nctx.log().whenComplete().thenAccept(log -> {\n    if (!log.children().isEmpty()) {\n        System.err.println("A request finished after " + log.children().size() + " attempt(s): " + log);\n    } else {\n        System.err.println("A request is done: " + log);\n    }\n});\n')),Object(i.b)("p",null,Object(i.b)("a",Object.assign({parentName:"p"},{href:"type://RetryingClient:https://javadoc.io/doc/com.linecorp.armeria/armeria-javadoc/latest/com/linecorp/armeria/client/retry/RetryingClient.html"}),"type://RetryingClient")," is a good example that leverages this feature.\nSee ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"/docs/client-retry#retryingclient-with-logging"}),"RetryingClient with logging")," for more information."))}m.isMDXComponent=!0},xCMr:function(e,t,n){"use strict";var a=n("81ph"),r=n("q1tI"),i=n.n(r),o=n("/94A"),s=n("+ejy");t.a=function(e){var t=a.data.allMdx.nodes;return i.a.createElement(s.a,Object.assign({},e,{candidateMdxNodes:t,index:o,prefix:"docs",pageTitleSuffix:"Armeria documentation"}))}}}]);
//# sourceMappingURL=component---src-pages-docs-advanced-structured-logging-mdx-9e159a1f4fe5551c2e2c.js.map